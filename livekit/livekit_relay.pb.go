// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.3
// source: livekit_relay.proto

package livekit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RoomSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName string `protobuf:"bytes,1,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	RoomId   string `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	NodeId   string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Flag     bool   `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *RoomSync) Reset() {
	*x = RoomSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSync) ProtoMessage() {}

func (x *RoomSync) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSync.ProtoReflect.Descriptor instead.
func (*RoomSync) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{0}
}

func (x *RoomSync) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *RoomSync) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *RoomSync) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RoomSync) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

type ParticipantsSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName     string             `protobuf:"bytes,1,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	Participants []*ParticipantInfo `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *ParticipantsSync) Reset() {
	*x = ParticipantsSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantsSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsSync) ProtoMessage() {}

func (x *ParticipantsSync) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsSync.ProtoReflect.Descriptor instead.
func (*ParticipantsSync) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{1}
}

func (x *ParticipantsSync) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *ParticipantsSync) GetParticipants() []*ParticipantInfo {
	if x != nil {
		return x.Participants
	}
	return nil
}

type TrackInActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssrc uint32 `protobuf:"varint,1,opt,name=ssrc,proto3" json:"ssrc,omitempty"`
}

func (x *TrackInActive) Reset() {
	*x = TrackInActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackInActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackInActive) ProtoMessage() {}

func (x *TrackInActive) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackInActive.ProtoReflect.Descriptor instead.
func (*TrackInActive) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{2}
}

func (x *TrackInActive) GetSsrc() uint32 {
	if x != nil {
		return x.Ssrc
	}
	return 0
}

type TrackPublic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StreamId            string              `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	PayloadType         uint32              `protobuf:"varint,3,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	Kind                int32               `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Ssrc                uint32              `protobuf:"varint,5,opt,name=ssrc,proto3" json:"ssrc,omitempty"`
	Codec               *RTPCodecParameters `protobuf:"bytes,6,opt,name=codec,proto3" json:"codec,omitempty"`
	Rid                 string              `protobuf:"bytes,7,opt,name=rid,proto3" json:"rid,omitempty"`
	RoomName            string              `protobuf:"bytes,9,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	ParticipantIdentity string              `protobuf:"bytes,10,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity,omitempty"`
	// RTPParameters是onmediatrack函数调用时真正需要的，其他内容并不需要
	RTPParameters *RTPParameters `protobuf:"bytes,11,opt,name=RTP_parameters,json=RTPParameters,proto3" json:"RTP_parameters,omitempty"`
	NodeId        string         `protobuf:"bytes,12,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *TrackPublic) Reset() {
	*x = TrackPublic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPublic) ProtoMessage() {}

func (x *TrackPublic) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPublic.ProtoReflect.Descriptor instead.
func (*TrackPublic) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{3}
}

func (x *TrackPublic) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrackPublic) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *TrackPublic) GetPayloadType() uint32 {
	if x != nil {
		return x.PayloadType
	}
	return 0
}

func (x *TrackPublic) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *TrackPublic) GetSsrc() uint32 {
	if x != nil {
		return x.Ssrc
	}
	return 0
}

func (x *TrackPublic) GetCodec() *RTPCodecParameters {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *TrackPublic) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *TrackPublic) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *TrackPublic) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *TrackPublic) GetRTPParameters() *RTPParameters {
	if x != nil {
		return x.RTPParameters
	}
	return nil
}

func (x *TrackPublic) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type RTPParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderExtensions []*RTPHeaderExtensionParameter `protobuf:"bytes,1,rep,name=header_extensions,json=headerExtensions,proto3" json:"header_extensions,omitempty"`
	Codecs           []*RTPCodecParameters          `protobuf:"bytes,2,rep,name=codecs,proto3" json:"codecs,omitempty"`
}

func (x *RTPParameters) Reset() {
	*x = RTPParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTPParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTPParameters) ProtoMessage() {}

func (x *RTPParameters) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTPParameters.ProtoReflect.Descriptor instead.
func (*RTPParameters) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{4}
}

func (x *RTPParameters) GetHeaderExtensions() []*RTPHeaderExtensionParameter {
	if x != nil {
		return x.HeaderExtensions
	}
	return nil
}

func (x *RTPParameters) GetCodecs() []*RTPCodecParameters {
	if x != nil {
		return x.Codecs
	}
	return nil
}

type RTPCodecParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RTPCodeCapability *RTPCodecCapability `protobuf:"bytes,1,opt,name=RTP_code_capability,json=RTPCodeCapability,proto3" json:"RTP_code_capability,omitempty"`
	PayloadType       uint32              `protobuf:"varint,2,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	StatsId           string              `protobuf:"bytes,3,opt,name=stats_id,json=statsId,proto3" json:"stats_id,omitempty"`
}

func (x *RTPCodecParameters) Reset() {
	*x = RTPCodecParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTPCodecParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTPCodecParameters) ProtoMessage() {}

func (x *RTPCodecParameters) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTPCodecParameters.ProtoReflect.Descriptor instead.
func (*RTPCodecParameters) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{5}
}

func (x *RTPCodecParameters) GetRTPCodeCapability() *RTPCodecCapability {
	if x != nil {
		return x.RTPCodeCapability
	}
	return nil
}

func (x *RTPCodecParameters) GetPayloadType() uint32 {
	if x != nil {
		return x.PayloadType
	}
	return 0
}

func (x *RTPCodecParameters) GetStatsId() string {
	if x != nil {
		return x.StatsId
	}
	return ""
}

type RTPCodecCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MimeType     string          `protobuf:"bytes,1,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Clockrate    uint32          `protobuf:"varint,2,opt,name=clockrate,proto3" json:"clockrate,omitempty"`
	Channels     uint32          `protobuf:"varint,3,opt,name=channels,proto3" json:"channels,omitempty"`
	SDPFmtpLine  string          `protobuf:"bytes,4,opt,name=SDP_fmtp_line,json=SDPFmtpLine,proto3" json:"SDP_fmtp_line,omitempty"`
	RTCPFeedback []*RTCPFeedback `protobuf:"bytes,5,rep,name=RTCP_feedback,json=RTCPFeedback,proto3" json:"RTCP_feedback,omitempty"`
}

func (x *RTPCodecCapability) Reset() {
	*x = RTPCodecCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTPCodecCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTPCodecCapability) ProtoMessage() {}

func (x *RTPCodecCapability) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTPCodecCapability.ProtoReflect.Descriptor instead.
func (*RTPCodecCapability) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{6}
}

func (x *RTPCodecCapability) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *RTPCodecCapability) GetClockrate() uint32 {
	if x != nil {
		return x.Clockrate
	}
	return 0
}

func (x *RTPCodecCapability) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *RTPCodecCapability) GetSDPFmtpLine() string {
	if x != nil {
		return x.SDPFmtpLine
	}
	return ""
}

func (x *RTPCodecCapability) GetRTCPFeedback() []*RTCPFeedback {
	if x != nil {
		return x.RTCPFeedback
	}
	return nil
}

type RTPHeaderExtensionParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URI string `protobuf:"bytes,1,opt,name=URI,proto3" json:"URI,omitempty"`
	Id  int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RTPHeaderExtensionParameter) Reset() {
	*x = RTPHeaderExtensionParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTPHeaderExtensionParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTPHeaderExtensionParameter) ProtoMessage() {}

func (x *RTPHeaderExtensionParameter) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTPHeaderExtensionParameter.ProtoReflect.Descriptor instead.
func (*RTPHeaderExtensionParameter) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{7}
}

func (x *RTPHeaderExtensionParameter) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *RTPHeaderExtensionParameter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RTCPFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Parameter string `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *RTCPFeedback) Reset() {
	*x = RTCPFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTCPFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTCPFeedback) ProtoMessage() {}

func (x *RTCPFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTCPFeedback.ProtoReflect.Descriptor instead.
func (*RTCPFeedback) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{8}
}

func (x *RTCPFeedback) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RTCPFeedback) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

type StartSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName string `protobuf:"bytes,1,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	NodeId   string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *StartSubscription) Reset() {
	*x = StartSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSubscription) ProtoMessage() {}

func (x *StartSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSubscription.ProtoReflect.Descriptor instead.
func (*StartSubscription) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{9}
}

func (x *StartSubscription) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *StartSubscription) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type RelaySubFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomName            string `protobuf:"bytes,1,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	ParticipantIdentity string `protobuf:"bytes,2,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity,omitempty"`
	TrackID             string `protobuf:"bytes,3,opt,name=track_iD,json=trackID,proto3" json:"track_iD,omitempty"`
	Ssrc                string `protobuf:"bytes,4,opt,name=ssrc,proto3" json:"ssrc,omitempty"`
}

func (x *RelaySubFinish) Reset() {
	*x = RelaySubFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelaySubFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelaySubFinish) ProtoMessage() {}

func (x *RelaySubFinish) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelaySubFinish.ProtoReflect.Descriptor instead.
func (*RelaySubFinish) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{10}
}

func (x *RelaySubFinish) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *RelaySubFinish) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *RelaySubFinish) GetTrackID() string {
	if x != nil {
		return x.TrackID
	}
	return ""
}

func (x *RelaySubFinish) GetSsrc() string {
	if x != nil {
		return x.Ssrc
	}
	return ""
}

type RelayConnectCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssrc string `protobuf:"bytes,1,opt,name=ssrc,proto3" json:"ssrc,omitempty"`
}

func (x *RelayConnectCloseRequest) Reset() {
	*x = RelayConnectCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayConnectCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayConnectCloseRequest) ProtoMessage() {}

func (x *RelayConnectCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayConnectCloseRequest.ProtoReflect.Descriptor instead.
func (*RelayConnectCloseRequest) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{11}
}

func (x *RelayConnectCloseRequest) GetSsrc() string {
	if x != nil {
		return x.Ssrc
	}
	return ""
}

type SendDataResponseSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendData *SendDataRequest `protobuf:"bytes,1,opt,name=send_data,json=sendData,proto3" json:"send_data,omitempty"`
}

func (x *SendDataResponseSync) Reset() {
	*x = SendDataResponseSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_relay_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendDataResponseSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDataResponseSync) ProtoMessage() {}

func (x *SendDataResponseSync) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_relay_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDataResponseSync.ProtoReflect.Descriptor instead.
func (*SendDataResponseSync) Descriptor() ([]byte, []int) {
	return file_livekit_relay_proto_rawDescGZIP(), []int{12}
}

func (x *SendDataResponseSync) GetSendData() *SendDataRequest {
	if x != nil {
		return x.SendData
	}
	return nil
}

var File_livekit_relay_proto protoreflect.FileDescriptor

var file_livekit_relay_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x1a, 0x14,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x6d, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x23, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x72, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x73, 0x72, 0x63, 0x22, 0xf2, 0x02, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x73, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73,
	0x73, 0x72, 0x63, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x54, 0x50,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x52, 0x54, 0x50, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x54, 0x50, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x52, 0x54, 0x50, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0x97, 0x01, 0x0a, 0x0d, 0x52, 0x54, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x10, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x52, 0x54, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x52,
	0x54, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x4b, 0x0a, 0x13, 0x52, 0x54, 0x50, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x54, 0x50, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x52, 0x54, 0x50,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x73, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a,
	0x12, 0x52, 0x54, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x53, 0x44,
	0x50, 0x5f, 0x66, 0x6d, 0x74, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x44, 0x50, 0x46, 0x6d, 0x74, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x3a,
	0x0a, 0x0d, 0x52, 0x54, 0x43, 0x50, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x52, 0x54, 0x43, 0x50, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x52, 0x54,
	0x43, 0x50, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x3f, 0x0a, 0x1b, 0x52, 0x54,
	0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x0c, 0x52,
	0x54, 0x43, 0x50, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x49, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x72, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x72, 0x63, 0x22, 0x2e, 0x0a, 0x18, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x72, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x72, 0x63, 0x22, 0x4d, 0x0a, 0x14, 0x53, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x46, 0x5a, 0x23, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0xaa, 0x02, 0x0d, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0xea, 0x02, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_livekit_relay_proto_rawDescOnce sync.Once
	file_livekit_relay_proto_rawDescData = file_livekit_relay_proto_rawDesc
)

func file_livekit_relay_proto_rawDescGZIP() []byte {
	file_livekit_relay_proto_rawDescOnce.Do(func() {
		file_livekit_relay_proto_rawDescData = protoimpl.X.CompressGZIP(file_livekit_relay_proto_rawDescData)
	})
	return file_livekit_relay_proto_rawDescData
}

var file_livekit_relay_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_livekit_relay_proto_goTypes = []interface{}{
	(*RoomSync)(nil),                    // 0: livekit.RoomSync
	(*ParticipantsSync)(nil),            // 1: livekit.ParticipantsSync
	(*TrackInActive)(nil),               // 2: livekit.TrackInActive
	(*TrackPublic)(nil),                 // 3: livekit.TrackPublic
	(*RTPParameters)(nil),               // 4: livekit.RTPParameters
	(*RTPCodecParameters)(nil),          // 5: livekit.RTPCodecParameters
	(*RTPCodecCapability)(nil),          // 6: livekit.RTPCodecCapability
	(*RTPHeaderExtensionParameter)(nil), // 7: livekit.RTPHeaderExtensionParameter
	(*RTCPFeedback)(nil),                // 8: livekit.RTCPFeedback
	(*StartSubscription)(nil),           // 9: livekit.StartSubscription
	(*RelaySubFinish)(nil),              // 10: livekit.RelaySubFinish
	(*RelayConnectCloseRequest)(nil),    // 11: livekit.RelayConnectCloseRequest
	(*SendDataResponseSync)(nil),        // 12: livekit.SendDataResponseSync
	(*ParticipantInfo)(nil),             // 13: livekit.ParticipantInfo
	(*SendDataRequest)(nil),             // 14: livekit.SendDataRequest
}
var file_livekit_relay_proto_depIdxs = []int32{
	13, // 0: livekit.ParticipantsSync.participants:type_name -> livekit.ParticipantInfo
	5,  // 1: livekit.TrackPublic.codec:type_name -> livekit.RTPCodecParameters
	4,  // 2: livekit.TrackPublic.RTP_parameters:type_name -> livekit.RTPParameters
	7,  // 3: livekit.RTPParameters.header_extensions:type_name -> livekit.RTPHeaderExtensionParameter
	5,  // 4: livekit.RTPParameters.codecs:type_name -> livekit.RTPCodecParameters
	6,  // 5: livekit.RTPCodecParameters.RTP_code_capability:type_name -> livekit.RTPCodecCapability
	8,  // 6: livekit.RTPCodecCapability.RTCP_feedback:type_name -> livekit.RTCPFeedback
	14, // 7: livekit.SendDataResponseSync.send_data:type_name -> livekit.SendDataRequest
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_livekit_relay_proto_init() }
func file_livekit_relay_proto_init() {
	if File_livekit_relay_proto != nil {
		return
	}
	file_livekit_models_proto_init()
	file_livekit_room_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_livekit_relay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantsSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackInActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackPublic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTPParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTPCodecParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTPCodecCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTPHeaderExtensionParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTCPFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelaySubFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayConnectCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_relay_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendDataResponseSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_livekit_relay_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_livekit_relay_proto_goTypes,
		DependencyIndexes: file_livekit_relay_proto_depIdxs,
		MessageInfos:      file_livekit_relay_proto_msgTypes,
	}.Build()
	File_livekit_relay_proto = out.File
	file_livekit_relay_proto_rawDesc = nil
	file_livekit_relay_proto_goTypes = nil
	file_livekit_relay_proto_depIdxs = nil
}
