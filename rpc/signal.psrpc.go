// Code generated by protoc-gen-psrpc v0.5.1, DO NOT EDIT.
// source: rpc/signal.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/rand"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)

var _ = version.PsrpcVersion_0_5

// =======================
// Signal Client Interface
// =======================

type SignalClient[NodeIdTopicType ~string] interface {
	RelaySignal(ctx context.Context, nodeId NodeIdTopicType, opts ...psrpc.RequestOption) (psrpc.ClientStream[*RelaySignalRequest, *RelaySignalResponse], error)
}

// ===========================
// Signal ServerImpl Interface
// ===========================

type SignalServerImpl interface {
	RelaySignal(psrpc.ServerStream[*RelaySignalResponse, *RelaySignalRequest]) error
}

// =======================
// Signal Server Interface
// =======================

type SignalServer[NodeIdTopicType ~string] interface {
	RegisterRelaySignalTopic(nodeId NodeIdTopicType) error
	DeregisterRelaySignalTopic(nodeId NodeIdTopicType)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// =============
// Signal Client
// =============

type signalClient[NodeIdTopicType ~string] struct {
	client *client.RPCClient
}

// NewSignalClient creates a psrpc client that implements the SignalClient interface.
func NewSignalClient[NodeIdTopicType ~string](bus psrpc.MessageBus, opts ...psrpc.ClientOption) (SignalClient[NodeIdTopicType], error) {
	sd := &info.ServiceDefinition{
		Name: "Signal",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("RelaySignal", false, false, false, true)

	rpcClient, err := client.NewRPCClientWithStreams(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &signalClient[NodeIdTopicType]{
		client: rpcClient,
	}, nil
}

func (c *signalClient[NodeIdTopicType]) RelaySignal(ctx context.Context, nodeId NodeIdTopicType, opts ...psrpc.RequestOption) (psrpc.ClientStream[*RelaySignalRequest, *RelaySignalResponse], error) {
	return client.OpenStream[*RelaySignalRequest, *RelaySignalResponse](ctx, c.client, "RelaySignal", []string{string(nodeId)}, opts...)
}

// =============
// Signal Server
// =============

type signalServer[NodeIdTopicType ~string] struct {
	svc SignalServerImpl
	rpc *server.RPCServer
}

// NewSignalServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewSignalServer[NodeIdTopicType ~string](svc SignalServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (SignalServer[NodeIdTopicType], error) {
	sd := &info.ServiceDefinition{
		Name: "Signal",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("RelaySignal", false, false, false, true)
	return &signalServer[NodeIdTopicType]{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *signalServer[NodeIdTopicType]) RegisterRelaySignalTopic(nodeId NodeIdTopicType) error {
	return server.RegisterStreamHandler(s.rpc, "RelaySignal", []string{string(nodeId)}, s.svc.RelaySignal, nil)
}

func (s *signalServer[NodeIdTopicType]) DeregisterRelaySignalTopic(nodeId NodeIdTopicType) {
	s.rpc.DeregisterHandler("RelaySignal", []string{string(nodeId)})
}

func (s *signalServer[NodeIdTopicType]) Shutdown() {
	s.rpc.Close(false)
}

func (s *signalServer[NodeIdTopicType]) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor7 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x6f, 0xe2, 0x30,
	0x10, 0xc5, 0x84, 0x4f, 0xb3, 0x48, 0x59, 0xb3, 0x0b, 0x51, 0x4e, 0x11, 0xa7, 0x68, 0x85, 0x12,
	0x29, 0xab, 0xde, 0x7a, 0xe2, 0x50, 0x71, 0x76, 0xd4, 0x43, 0x7b, 0x41, 0xc1, 0x58, 0xa9, 0x45,
	0x88, 0x8d, 0xc7, 0x20, 0xf1, 0x13, 0xfa, 0x77, 0xfa, 0xa7, 0xfa, 0x37, 0x2a, 0x62, 0x3e, 0x52,
	0xd1, 0x53, 0x66, 0xde, 0x7b, 0x33, 0xef, 0xc5, 0x83, 0x5d, 0xad, 0x58, 0x0c, 0x22, 0x2f, 0xb3,
	0x22, 0x52, 0x5a, 0x1a, 0x49, 0x1c, 0xad, 0x98, 0x3f, 0x94, 0xca, 0x08, 0x59, 0x82, 0xc5, 0xfc,
	0x71, 0x21, 0x0e, 0x7c, 0x23, 0xcc, 0x52, 0x94, 0x86, 0xeb, 0xab, 0xd6, 0xff, 0x7d, 0xc1, 0xb5,
	0x61, 0x16, 0x9a, 0x7e, 0x22, 0x4c, 0x28, 0x2f, 0xb2, 0x63, 0x5a, 0x2d, 0xa5, 0x7c, 0xb7, 0xe7,
	0x60, 0xc8, 0x23, 0x1e, 0x82, 0xc9, 0xb4, 0x59, 0x02, 0x07, 0x10, 0xb2, 0xf4, 0x50, 0x80, 0xc2,
	0x41, 0xf2, 0x37, 0x3a, 0x6f, 0x88, 0xd2, 0x13, 0x9b, 0x5a, 0x72, 0xd1, 0xa0, 0xbf, 0xa0, 0xd6,
	0x93, 0x19, 0xee, 0xa6, 0x4f, 0xcf, 0xe9, 0xb1, 0x64, 0x5e, 0xb3, 0x9a, 0x73, 0x6f, 0x73, 0x16,
	0x5f, 0x34, 0xe8, 0x45, 0x42, 0x12, 0xdc, 0xd3, 0xd6, 0x16, 0x3c, 0x27, 0x70, 0xc2, 0x41, 0x32,
	0xbe, 0xc9, 0xeb, 0xa9, 0xe8, 0x55, 0x47, 0x5c, 0xec, 0x00, 0xdf, 0x79, 0xad, 0x00, 0x85, 0x2d,
	0x7a, 0x2a, 0xc9, 0x1f, 0xdc, 0x66, 0x85, 0x04, 0xee, 0xb5, 0x03, 0x14, 0xf6, 0xa8, 0x6d, 0xe6,
	0x7d, 0xdc, 0xdd, 0x72, 0x80, 0x2c, 0xe7, 0x53, 0x83, 0x47, 0xdf, 0x7e, 0x14, 0x94, 0x2c, 0x81,
	0x93, 0x07, 0xdc, 0xd7, 0xe7, 0x1a, 0xbc, 0x66, 0x65, 0x3f, 0xb9, 0xb3, 0xb7, 0x3c, 0xbd, 0x29,
	0x2f, 0x01, 0x9c, 0x1f, 0x02, 0xb4, 0x6a, 0x01, 0x12, 0x86, 0x3b, 0x76, 0x09, 0x79, 0xc1, 0x83,
	0x9a, 0x3f, 0x99, 0x44, 0x5a, 0xb1, 0xe8, 0xfe, 0xe9, 0x7d, 0xef, 0x9e, 0xb0, 0xa6, 0xd3, 0xc9,
	0xc7, 0x3b, 0x1a, 0xb9, 0xc8, 0x1f, 0x92, 0x6e, 0x29, 0xd7, 0x7c, 0x29, 0xd6, 0xa7, 0xb3, 0x04,
	0x68, 0x3e, 0x7b, 0xfd, 0x97, 0x0b, 0xf3, 0xb6, 0x5f, 0x45, 0x4c, 0x6e, 0xe3, 0x73, 0xf8, 0xeb,
	0x57, 0x6d, 0xf2, 0x18, 0xb8, 0x3e, 0x08, 0xc6, 0x63, 0xad, 0xd8, 0xaa, 0x53, 0x5d, 0xfe, 0xff,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x9e, 0xe5, 0x63, 0x4c, 0x02, 0x00, 0x00,
}
